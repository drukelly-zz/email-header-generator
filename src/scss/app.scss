// fonts
@font-face {
  font-family: 'Gotham-Medium';
  src: url('../../fonts/Gotham-Medium.eot?#iefix') format('embedded-opentype'),  url('../../fonts/Gotham-Medium.otf')  format('opentype'),
       url('../../fonts/Gotham-Medium.woff') format('woff'), url('../../fonts/Gotham-Medium.ttf')  format('truetype'), url('../../fonts/Gotham-Medium.svg#Gotham-Medium') format('svg');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'Gotham-Book';
  src: url('../../fonts/Gotham-Book.eot?#iefix') format('embedded-opentype'),  url('../../fonts/Gotham-Book.otf')  format('opentype'),
       url('../../fonts/Gotham-Book.woff') format('woff'), url('../../fonts/Gotham-Book.ttf')  format('truetype'), url('../../fonts/Gotham-Book.svg#Gotham-Book') format('svg');
  font-weight: normal;
  font-style: normal;
}

// mixins
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
    / nth($conversion-factors, index($convertable-units, unit($value)))
    * nth($conversion-factors, index($convertable-units, $unit));
  }
  
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }
  
  $conversion-map: ( 
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
    );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  
  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

// basic html tags formatting 
input,
select,
textarea {
  font-size: .8em;
}
label {
  font-weight: bold;
}

// utility classes
.active > img {
  border-color: #333;
}
.hide {
  display: none;
  font: 0/0 a;
  height: 0;
  overflow: hidden;
}

// app styling
#previewWindowContainer {
  height: 150px;
  overflow: hidden;
  position: relative;
  text-rendering: geometricPrecision;
  width: 616px;
}

.background {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
  z-index: 10;
  &:before {
    -moz-background-blend-mode: multiply;
    -webkit-background-blend-mode: multiply;
    background-blend-mode: multiply;
    content: "";
    display: block;
    height: 150px;
    width: 616px;
  }
}

.positioningContainer {
  left: 30px;
  position: relative;
  z-index: 20;
  width: 420px;
  > div {
    color: #565656;
    font: 26px/1 'Gotham-Book', sans-serif;
    letter-spacing: -0.5pt;
    margin: 0;
    position: relative;
  }
}

#designOptions li {
  cursor: pointer;
}

.watermark {
  #bannerText {
    &.dark-blue,
    &.light-blue,
    &.light-green {
      color: #fff;
    }
  }
  .background {
    &:before {
      background: url('../../images/bg-watermark.png') no-repeat top left;
      background-size: 616px 150px;
      opacity: .3;
    }
    &.dark-blue {
      @include linear-gradient(92deg, #003f56 0%, #007099 82%);
    }
    &.light-blue {
      @include linear-gradient(92deg, #0087bf 0%, #0095d3 75%);
    }
    &.light-green {
      @include linear-gradient(92deg, #387c2c 0%, #6db33f 90%);
    }
  }
}

.color-triangles {
  #bannerText {
    color: #565656;
    &.dark-blue,
    &.light-blue,
    &.light-green {
      color: #fff;
    }
  }
  .background {
    &:before {
      background-image: url('../../images/bg-color-triangles.png');
      background-position: top right;
      background-repeat: no-repeat;
      background-size: 616px 150px;
    }
    &.dark-blue {
      background-color: #006990;
    }
    &.light-blue {
      background-color: #0095d3;
    }
    &.light-green {
      background-color: #62a339;
    }
    &.white {
      @include linear-gradient(0deg, #e6e6e6 0%, #fff 58%);
    }
  }
}

.white-triangles {
  .background {
    background: url('../../images/bg-white-triangles.png') no-repeat left -1px;
    background-size: 616px 150px;
  }
}